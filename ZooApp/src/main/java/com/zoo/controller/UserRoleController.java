package com.zoo.controller;

import static com.zoo.util.ClientMessageUtil.CREATION_FAILED;
import static com.zoo.util.ClientMessageUtil.CREATION_SUCCESSFUL;
import static com.zoo.util.ClientMessageUtil.DELETION_FAILED;
import static com.zoo.util.ClientMessageUtil.DELETION_SUCCESSFUL;
import static com.zoo.util.ClientMessageUtil.UPDATE_FAILED;
import static com.zoo.util.ClientMessageUtil.UPDATE_SUCCESSFUL;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.zoo.models.ClientMessage;
import com.zoo.models.UserRole;
import com.zoo.services.UserRoleServices;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/api")
@Api(value= "UserRollController", description = "REST controller related to User Role Entities")
public class UserRoleController {
	
	private static Logger log = Logger.getLogger(UserRoleController.class);
	
	@Autowired
	private UserRoleServices userv;
	
	
	@ApiOperation(value="Create new user role with specified id number", notes="Provide an easy way to update the user role database")
	@PostMapping(path = "/userRoleId")
	public @ResponseBody ClientMessage createRole(@RequestParam(value="id", name="id") int id, @RequestParam(value="role", name="role") String role) {
		log.info("creating user role");
		return userv.createRole(new UserRole(id, role)) ? CREATION_SUCCESSFUL : CREATION_FAILED ;
	}
	
	@ApiOperation(value="Create new user role with autogenerated id number", notes="Provide an easy way to update the user role database")
	@PostMapping(path = "/userRole")
	public @ResponseBody ClientMessage createRole( @RequestParam(value="role", name="role") String role) {
		log.info("creating user role");
		return userv.createRole(new UserRole(role)) ? CREATION_SUCCESSFUL : CREATION_FAILED ;
	}
	
	@GetMapping("/usersRole")
	@ApiOperation("get a user role")
	public @ResponseBody UserRole getUserRole(@RequestBody UserRole role) {
		return userv.getRoleById(role.getId());
	}

	@GetMapping("/usersRoles")
	@ApiOperation("get a user role")
	public @ResponseBody List<UserRole> getAllUserRoles() {
		return userv.getAllRoles();
	}
	@PutMapping("/userRole")
	@ApiOperation("update user role entity")
	public @ResponseBody ClientMessage editUserRole(@RequestBody UserRole role) {
		return userv.updateRole(role)? UPDATE_SUCCESSFUL : UPDATE_FAILED;
	}

	@DeleteMapping("/userRole")
	@ApiOperation("delete user role entity")
	public @ResponseBody ClientMessage deleteUser(@RequestBody UserRole role) {
		return userv.deleteUserRole(role) ? DELETION_SUCCESSFUL : DELETION_FAILED;
	}
}
